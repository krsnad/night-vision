// Navy ~ 0.2-lite

// <ds>Sparse data: points, squares, crosses, triangles</ds>
// Format: [<timestamp>, <value>, <?direction>]
// <value> :: Price/value
// <?direction> :: Triangle direction: 1 | -1

[OVERLAY name=Sparse, ctx=Canvas, version=1.0.0]

// Overlay props
prop('color', { type: 'Color', def: '#898989' })
prop('size', { type: 'number', def: 3 })
prop('padding', { type: 'number', def: 0.05 })
prop('shape', {
    type: 'string',
    def: 'point',
    options: ['point', 'square', 'cross', 'triangle']
})

// Draw call
draw(ctx) {
    const hub = $core.hub
    const layout = $core.layout
    const view = $core.view
    const data = view.src

    ctx.fillStyle = $props.color
    ctx.strokeStyle = $props.color

    const drawFunc = createShapeDrawer($props.shape)

    ctx.beginPath()
    if ($props.shape === 'cross') {
        ctx.lineWidth = Math.max($props.size - 1, 1)
    }

    for (var i = view.i1, n = view.i2; i <= n; i++) {
        // this is i is the index of sparse data
        // we need the index of the candle to draw the shape
        let ts = data[i][0]
        let idx = hub.tsIndexMap.get(ts)
        let { x, y, dir } = getCoords(data[i], idx, layout.ti2x, layout.value2y)
        drawFunc(ctx, x, y, dir)
    }

    if ($props.shape === 'cross') {
        ctx.stroke()
    } else {
        ctx.fill()
    }
}

function getCoords(p, idx, ti2x, value2y) {

    let x = ti2x(p[0], idx)
    let dir = p[2] || -1
    console.log($props.padding);

    let y = value2y(p[1]) * (1 - dir *  $props.padding)
    console.log(new Date(p[0]), p[1], dir)
    return { x, y, dir }
}


// ... (previous code remains the same)

function createShapeDrawer(shape) {
    const shapeDrawers = {
        point: (ctx, x, y, dir) => {
            ctx.moveTo(x + $props.size, y)
            ctx.arc(x, y, $props.size, 0, Math.PI * 2, false)
        },
        square: (ctx, x, y, dir) => {
            const half = $props.size / 2
            ctx.moveTo(x - half, y - half)
            ctx.lineTo(x + half, y - half)
            ctx.lineTo(x + half, y + half)
            ctx.lineTo(x - half, y + half)
            ctx.closePath()
        },
        cross: (ctx, x, y, dir) => {
            const half = $props.size / 2
            ctx.moveTo(x - half, y)
            ctx.lineTo(x + half, y)
            ctx.moveTo(x, y - half)
            ctx.lineTo(x, y + half)
        },
        triangle: (ctx, x, y, dir) => {
            const side = $props.size * 2
            ctx.moveTo(x, y)
            ctx.lineTo(x + side * dir * 0.63, y + side * dir)
            ctx.lineTo(x - side * dir * 0.63, y + side * dir)
            ctx.closePath()
        }
    }

    if (!(shape in shapeDrawers)) {
        throw new Error(`Unknown shape: ${shape}`)
    }
    return shapeDrawers[shape]
}

// ... (rest of the code remains the same)


// Static methods
static yRange(data) {
    let len = data.length
    var h, l, high = -Infinity, low = Infinity
    for(var i = 0; i < len; i++) {
        let point = data[i][1]
        if (point > high) high = point
        if (point < low) low = point
    }
    return [high, low]
}

static preSampler(x) {
    return [x[1]]
}

// Legend, defined as pairs [value, color]
legend(x) {
    return [[Math.random(), $props.color]]
}